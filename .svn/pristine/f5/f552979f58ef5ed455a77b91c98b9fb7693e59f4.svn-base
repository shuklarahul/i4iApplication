using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Mvc;
using WorldRef.DataLayer;
using WorldRef.Models;
using WorldRef.BusinessLayer;
using System.Web.Security;
using System.Security.Cryptography;
using System.Text;
using System.IO;
using System.Configuration;
namespace WorldRef.Controllers
{
    public class WorldRefController : Controller
    {
        public I4IDBEntities context=new I4IDBEntities();
        public ActionResult WorldRefIndex()
        {
            SignUpWorldRefModel signUpModel = new SignUpWorldRefModel();
            signUpModel=GetAllSignUpDetails();
           
            return View(signUpModel);
        }
        #region All SignUp Details
        private SignUpWorldRefModel GetAllSignUpDetails()
        {
            SignUpWorldRefModel signUpModel = new SignUpWorldRefModel();
            List<SelectListItem> selectListCountry = new List<SelectListItem>();
            List<SelectListItem> selectList = new List<SelectListItem>();//Developer, Investor, Fabricator, Procurement Staff, Others
            selectList.Add(new SelectListItem() { Text = "I am", Value = "0" });
            selectList.Add(new SelectListItem() { Text = "Manufacturer", Value = "Manufacturer" });
            selectList.Add(new SelectListItem() { Text = "Contractor", Value = "Contractor" });
            selectList.Add(new SelectListItem() { Text = "Consultant", Value = "Consultant" });
            selectList.Add(new SelectListItem() { Text = "Trading Company", Value = "Trading Company" });
            selectList.Add(new SelectListItem() { Text = "Project Owner’s/Procurement Staff", Value = "Project Owner’s/Procurement Staff" });
            selectList.Add(new SelectListItem() { Text = "Developer", Value = "Developer" });
            selectList.Add(new SelectListItem() { Text = "Investor", Value = "Investor" });
            selectList.Add(new SelectListItem() { Text = "Fabricator", Value = "Fabricator" });
            selectList.Add(new SelectListItem() { Text = "Raw Material Supplier", Value = "Raw Material Supplier" });
            selectList.Add(new SelectListItem() { Text = "Others", Value = "Others" });
            signUpModel.TypeList = selectList;

            var content = (from p in context.Countries
                           select new { p.CountryID, p.CountryName }).AsEnumerable();

            selectListCountry.Add(new SelectListItem() { Text = "Select Country", Value = "0" });

            foreach (var item in content)
            {
                selectListCountry.Add(new SelectListItem() { Text = item.CountryName, Value = item.CountryName });

            }
            signUpModel.CountryList = selectListCountry;
            KnowledgeLogic knowIndustry = new KnowledgeLogic();
            signUpModel.IndustryList = knowIndustry.GetIndustry();
            List<SelectListItem> selectList1 = new List<SelectListItem>();
            selectList1.Add(new SelectListItem() { Text = "Type of Recruitment", Value = "0" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for my Organisation only", Value = "I recruit for my Organisation only" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for Other Organisations only", Value = "I recruit for Other Organisations only" });
            selectList1.Add(new SelectListItem() { Text = "Both: I recruit for my and other organisations", Value = "Both: I recruit for my and other organisations" });
            signUpModel.RecruitersTypeList = selectList1;
            return signUpModel;
        }
        #endregion
        #region Partial View for Sign in
        public ActionResult _SignIN()
        {
            return PartialView();
        }
        #endregion
        #region code for login uploader in WorldrefIndex added by Rahul  Shukla Date :29/09/2015

        public JsonResult LoginIndex(string UserName, string Password, string returnUrl)
        {
            SignUpWorldRef signup = new SignUpWorldRef();
            SignUpWorldRefModel signWorldModel = signup.Login(UserName, Password);
            if (signWorldModel != null)
            {
                HttpCookie userNameCookies = new HttpCookie("username");
                userNameCookies.Value = signWorldModel.Name;
                Response.Cookies.Add(userNameCookies);

                HttpCookie userNameCookiesq = new HttpCookie("UsrNo");
                userNameCookiesq.Value = signWorldModel.UserNo;
                Response.Cookies.Add(userNameCookiesq);




                HttpCookie genraluserPhoto = new HttpCookie("GenuserPhoto");
                genraluserPhoto.Value = signWorldModel.PhotoAttach;
                Response.Cookies.Add(genraluserPhoto);

                HttpCookie userNoCookies = new HttpCookie("UName");
                userNoCookies.Value = UserName;
                Response.Cookies.Add(userNoCookies);

                HttpCookie userNameCookies1 = new HttpCookie("UserId");
                userNameCookies1.Value = signWorldModel.Id.ToString();
                Response.Cookies.Add(userNameCookies1);



                HttpCookie userNameCookies2 = new HttpCookie("UserRole");
                userNameCookies2.Value = signWorldModel.UserRole.ToString();
                Response.Cookies.Add(userNameCookies2);

                if (signWorldModel.UserRole == "W")

                    return Json("ue", JsonRequestBehavior.AllowGet);
                else
                    return Json("re", JsonRequestBehavior.AllowGet);
            }
            else
            {
                signWorldModel = signup.SignInCommonUser(UserName, Password);
                if (signWorldModel != null)
                {
                    HttpCookie userNameCookies = new HttpCookie("Cusername");
                    userNameCookies.Value = signWorldModel.Name;
                    Response.Cookies.Add(userNameCookies);

                    HttpCookie userNameCookies1 = new HttpCookie("CUserId");
                    userNameCookies1.Value = signWorldModel.Id.ToString();
                    Response.Cookies.Add(userNameCookies1);
                    return Json("wi", JsonRequestBehavior.AllowGet);

                }
                else
                {

                    TempData.Clear();

                    return Json("nr", JsonRequestBehavior.AllowGet);
                }
            }
            
        }
        #endregion
        #region code for save linkedin profile data in database
        public JsonResult SaveLinkedInProfile(string projid, string firstName, string email, string lastName, string Industry, string picUrl)
        {
            try
            {
                string UserNo = getUserNo();
                string password = GeneratePassword();
                RegisterUser objregister = new RegisterUser();
                objregister.UserFirstName = firstName;
                objregister.Email = email;
                objregister.UserLastName = lastName;
                objregister.Industries = Industry;
                objregister.UserNo = UserNo;
                objregister.Password = password;
                objregister.UserRole = "L";
                int creditcount = 0;
                //int userId = (from x in context.RegisterUsers
                //              where x.Email == email
                //              select x.Email).FirstOrDefault().Count();


                //int uId = Convert.ToInt32(userId.f);
                //if (userId > 0)
                //{
                //    var userNo = (from x in context.RegisterUsers
                //                  where x.Email == email
                //                  select x.UserNo).SingleOrDefault();
                //    string UserNumber = userNo.ToString();

                //    string UsName = UserNumber;
                //    HttpCookie userNoCookies = new HttpCookie("UserName");
                //    userNoCookies.Value = UsName;
                //    Response.Cookies.Add(userNoCookies);
                //    Response.Cookies.Set(userNoCookies);

                //}
                //else
                //{
                //    context.RegisterUsers.Add(objregister);
                //    context.SaveChanges();
                //    string UsName = UserNo;
                //    HttpCookie userNoCookies = new HttpCookie("UserName");
                //    userNoCookies.Value = UsName;
                //    Response.Cookies.Add(userNoCookies);
                //    Response.Cookies.Set(userNoCookies);
                //}
                int proid = Convert.ToInt32(projid);
                creditcount = (from x in context.LinkedInUsers
                               where x.id == proid && x.Email == email
                               select new { x.Email, x.id }).Count();
                if (creditcount > 0)
                {
                }
                else
                {
                    LinkedInUser objLuser = new LinkedInUser();
                    objLuser.id = Convert.ToInt32(projid);
                    objLuser.FirstName = firstName;
                    objLuser.LastName = lastName;
                    objLuser.Email = email;
                    objLuser.Industry = Industry;
                    objLuser.CreditM = false;
                    objLuser.picUrl = picUrl;
                    context.LinkedInUsers.Add(objLuser);
                    context.SaveChanges();
                }
                int projectId = Convert.ToInt32(projid);
                var emailid = (from x in context.LinkedInUsers
                               where x.id == projectId
                               select x.Email);
                string linkedEmailid = emailid.ToString();
            }
            catch (Exception ex)
            {

            }
            return Json("", JsonRequestBehavior.AllowGet);
        }


        public JsonResult SignInwithLinkedin(string firstName, string email, string lastName, string Industry, string picUrl)
        {
            try
            {
                string UserNo = getUserNo();
                string password = GeneratePassword();
                RegisterUser objregister = new RegisterUser();
                objregister.UserFirstName = firstName;
                objregister.Email = email;
                objregister.UserLastName = lastName;
                objregister.Industries = Industry;
                objregister.UserNo = UserNo;
                objregister.Password = password;
                objregister.UserRole = "L";

                
                var userId = (from x in context.RegisterUsers
                              where x.Email == email
                              select x.Email).Count();
              
                if (userId > 0)
                {
                    var model = (from x in context.RegisterUsers
                                 where x.Email == email && x.UserRole=="L"
                                 select new { x.UserNo, x.Id, x.UserRole }).SingleOrDefault();
                    string UserNumber = model.UserNo.ToString();
                    string Uid = model.Id.ToString();
                    string urole = model.UserRole.ToString();
                    string UsName = UserNumber;
                    HttpCookie userNoCookies = new HttpCookie("UserName");
                    userNoCookies.Value = UsName;
                    Response.Cookies.Add(userNoCookies);
                    Response.Cookies.Set(userNoCookies);

                    HttpCookie userNameCookies1 = new HttpCookie("UserId");
                    userNameCookies1.Value = Uid;
                    Response.Cookies.Add(userNameCookies1);
                    HttpCookie userNameCookies5 = new HttpCookie("UName");
                    userNameCookies5.Value = UserNo;
                    Response.Cookies.Add(userNameCookies5);


                    HttpCookie userNameCookies2 = new HttpCookie("UserRole");
                    userNameCookies2.Value = urole;
                    Response.Cookies.Add(userNameCookies2);

                    return Json("Success", JsonRequestBehavior.AllowGet);

                }
                else
                {
                    context.RegisterUsers.Add(objregister);
                    context.SaveChanges();
                    string UsName = UserNo;
                    HttpCookie userNoCookies = new HttpCookie("UserName");
                    userNoCookies.Value = UsName;
                    Response.Cookies.Add(userNoCookies);
                    Response.Cookies.Set(userNoCookies);

                    //var model = (from x in context.RegisterUsers
                    //             where x.Email == email
                    //             select new { x.UserNo, x.Id, x.UserRole }).SingleOrDefault();
                    var Userid = objregister.Id;

                    HttpCookie userNameCookies1 = new HttpCookie("UserId");
                    userNameCookies1.Value = Userid.ToString();
                    Response.Cookies.Add(userNameCookies1);


                    HttpCookie userNameCookies2 = new HttpCookie("UserRole");
                    userNameCookies2.Value = "L";
                    Response.Cookies.Add(userNameCookies2);

                }



            }
            catch (Exception ex)
            {

            }
            return Json("", JsonRequestBehavior.AllowGet);
        }

        private string GeneratePassword()
        {
            string strPwdchar = "abcdefghijklmnopqrstuvwxyz0123456789#+@&$ABCDEFGHIJKLMNOPQRSTUVWXYZ";
            string strPwd = "";
            Random rnd = new Random();
            for (int i = 0; i <= 7; i++)
            {
                int iRandom = rnd.Next(0, strPwdchar.Length - 1);
                strPwd += strPwdchar.Substring(iRandom, 1);
            }
            return strPwd;
        }
        private string getUserNo()
        {
            string UserName = string.Empty;

            UserName = GetUniqueKey(7);
            using (I4IDBEntities context = new I4IDBEntities())
            {
                var isexistKey = context.RegisterUsers.Where(m => m.UserNo == UserName).FirstOrDefault();
                if (isexistKey != null)
                {
                    getUserNo();
                }
            }
            return UserName;
        }
        public static string GetUniqueKey(int maxSize)
        {
            char[] chars = new char[62];
            chars =
            "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890".ToCharArray();
            byte[] data = new byte[1];
            RNGCryptoServiceProvider crypto = new RNGCryptoServiceProvider();
            crypto.GetNonZeroBytes(data);
            data = new byte[maxSize];
            crypto.GetNonZeroBytes(data);
            StringBuilder result = new StringBuilder(maxSize);
            foreach (byte b in data)
            {
                result.Append(chars[b % (chars.Length)]);
            }
            return result.ToString();
        }
        #endregion
        #region code for sign out  added by rahul shukla modified date: 29/09/2015
        public ActionResult SignOut()
        {
            Response.Cookies.Clear();
            FormsAuthentication.SignOut();

            string[] myCookie = Request.Cookies.AllKeys;
            foreach (string cookie in myCookie)
            {
                Response.Cookies[cookie].Expires = DateTime.Now.AddDays(-1);
            }

            Session.Clear();

            return RedirectToAction("WorldrefIndex");
        }
        #endregion
        #region code for save uploader details in database added by rahul shukla dated :01/10/2015
        [HttpPost]
        public ActionResult SignUp(SignUpWorldRefModel signModel, FormCollection formCollection, string ProfileReason)
        {
            
            ISignUpWorldRef signup = new SignUpWorldRef();
            Email email = new Email();
          
            var IsRegistered =
                (from q in context.RegisterUsers where q.Email.ToLower() == signModel.Email.ToLower() && q.UserRole == "W" select q.UserNo).
                    FirstOrDefault();

            if (IsRegistered != null)
            {
                TempData.Clear();
                TempData.Add("ErrorMessage", "Email Id Already Registered");
                return RedirectToAction("WorldrefIndex");
            }
            if (ProfileReason == "BusinessUnit")
            {
                signModel.UploaderType = ProfileReason;

            }
            else
            {

                signModel.UploaderType = ProfileReason;
            }
            string path = string.Empty;
            string filename = string.Empty;
            string Extension = string.Empty;
            string guid = string.Empty;
            string CompanyLogo = string.Empty;
            string CompanyProfile = string.Empty;

            for (int i = 0; i < Request.Files.Count; i++)
            {
                guid = Guid.NewGuid().ToString();
                path = AppDomain.CurrentDomain.BaseDirectory + "uploads/";
                bool existPath = Directory.Exists(path);
                if (!existPath) Directory.CreateDirectory(path);

                filename = Path.GetFileName(Request.Files[i].FileName);
                Extension = Path.GetExtension(Request.Files[i].FileName);
                if (i == 0)
                {
                    CompanyProfile = Path.Combine(guid + Extension).ToString();
                }
                else
                {
                    CompanyLogo = Path.Combine(guid + Extension).ToString();
                }
                Request.Files[i].SaveAs(Path.Combine(path, guid + Extension));
            }
            signModel.OrganisationName = formCollection["ParentOrganisationName"];
            signModel.BussinessUnitName = formCollection["BusinessUnitName"];
            signModel.MyCompany = formCollection["Type"];
            signModel.OfficialNumber = formCollection["ContactNumber"];
            signModel.RecoveryMail = formCollection["AlternateEmail"];
            signModel.OtherMail = formCollection["OtherMail"];
            //OtherMail
            signModel.ProfileFileName = CompanyProfile;
            signModel.CompanyLogo = CompanyLogo;
            signModel.ProfileUrl = formCollection["ProfileUrl"];
            signModel.ProfilePath = Path.Combine(guid + Extension).ToString();
            string userName = formCollection["ProfileUrl"];
            signModel.UserName = email.getUserNo();
            //signModel.UserName = email.getUserNo();
            signModel.Password = email.GeneratePassword();
            //  signModel.ContactNumber = signModel.ContactCode + "-" + signModel.ContactNumber;
            if (signModel.Type == "Others")
            {
                signModel.Type = signModel.OtherType;
            }

            if (!string.IsNullOrEmpty(signModel.OtherIndustryName))
            {
                AddOtherIndustry(signModel.OtherIndustryName);
                signModel.Industry = (from indus in context.Industries
                                      where indus.IndustriesName == signModel.OtherIndustryName
                                      select indus.IndustriesID).FirstOrDefault().ToString();
            }
            else
            {

                signModel.Industry = formCollection["Industry"];

            }
            string status = signup.Add(signModel);
            if (status == "Success")
            {
                TempData.Clear();
                var callbackUrl1 = Url.Action("PromotionLibraryform", "PromotionLibrary", new { }, protocol: Request.Url.Scheme);
                //Thank you for Signing Up with us. Please do not forget to submit your material at Promotional Library [Link] of i4i. Please do not forget to submit your material at <a href = '" + callbackUrl1 + "'>
                string textDisplay = "Thank you for Signing Up with us. The Username and Password has been sent to your email address.";
                //   string textDisplay = "Thank you for signing up with us.The Username and Password has been sent to your email address.You may continue to sign in.";
                string UserId = (from db in context.RegisterUsers where db.UserNo == signModel.UserName select db.Id).FirstOrDefault().ToString();
                // TempData.Add("ErrorMessage", textDisplay);
                TempData.Add("DisplayMessage", textDisplay);
                AddUserIndustry(Convert.ToInt32(UserId), AddIndustryToArray(formCollection, formCollection["Industry"].ToString()));
                string link = ConfigurationManager.AppSettings["WebLink"].ToString();
                var callbackUrl = Url.Action("ChangeUserNameAndPassword", "WorldRef", new { userId = UserId }, protocol: Request.Url.Scheme);

                string Subject = "Welcome to WorldRef";
                string Body = "<div style='font-size:15px; font-family:Calibri Light;'>Thank you for Registering with World Ref.<br/> <br/> Your username is : " + signModel.UserName + " <br/> Your password is : " + signModel.Password;
                Body = Body + "<br/><br/> In case you wish to change your username and password, please <a href = '" + callbackUrl + "'>Click here</a><br/><br/>";
                Body = Body +
                       " WorldRef gives you maximum exposure to utilize your experiences and achievements in the engineering industry.<br/><br/>Please upload your documents on our <a href = '" + callbackUrl1 + "'>Promotional Library</a> for access to our associates and customers, and for our review.</div>";// Promotional Library
                email.SendMail(signModel.Name, signModel.Email, Subject, Body);

                return RedirectToAction("WorldrefIndex");
            }
            else
            {
                TempData.Clear();
                TempData.Add("ErrorMessage", "Failed !.Please try again");
                return RedirectToAction("WorldrefIndex");
            }
        }
        #endregion

        private void AddOtherIndustry(string industry)
        {
            int ValueProvider;
            int industryId = (from indu in context.Industries
                              where indu.IndustriesName.ToLower() == industry.ToLower()
                              select indu.IndustriesID
                                ).FirstOrDefault();

            if (industryId == 0)
            {
                if (int.TryParse(industry, out ValueProvider))
                {
                    int industryValue = Convert.ToInt32(industry);
                    industryId = (from indu in context.Industries
                                  where indu.IndustriesID == industryValue
                                  select indu.IndustriesID
                                    ).FirstOrDefault();
                    if (industryId == 0)
                    {
                        context.Industries.Add(new Industry() { IndustriesName = industry });
                    }
                }
                else
                {
                    context.Industries.Add(new Industry() { IndustriesName = industry });
                }
                context.SaveChanges();
            }

        }

        private void AddUserIndustry(int userId, string[] industries)
        {
            foreach (string industry in industries)
            {
                if (!string.IsNullOrEmpty(industry))
                {
                    AddOtherIndustry(industry);
                    context.UserIndustries.Add(new UserIndustry()
                    {
                        UserId = userId,
                        IndustryId = GetIndustryId(industry),
                        createdOn = DateTime.Now
                    });
                    context.SaveChanges();
                }
            }
        }

        private int GetIndustryId(string IndustryName)
        {
            int ValueProvider;
            int industryId = (from indu in context.Industries
                              where indu.IndustriesName.ToLower() == IndustryName.ToLower()
                              select indu.IndustriesID
                                ).FirstOrDefault();
            if (industryId == 0)
            {
                if (int.TryParse(IndustryName, out ValueProvider))
                {
                    int indiesId = Convert.ToInt32(IndustryName);
                    industryId = (from indu in context.Industries
                                  where indu.IndustriesID == indiesId
                                  select indu.IndustriesID
                                ).FirstOrDefault();
                }
            }

            return industryId;
        }

        private string[] AddIndustryToArray(FormCollection frm, string DropDownvalue)
        {
            int i = 0;
            string[] industries = new string[50];
            foreach (var key in frm.AllKeys)
            {
                if (key.Contains("txt"))
                {
                    string valueOfLink = Request.Form[key];
                    industries[i] = valueOfLink;
                    i++;
                }
            }
            string[] dropValues = DropDownvalue.Split(',');

            foreach (string indus in dropValues)
            {
                industries[i] = indus;
                i++;
            }

            return industries;
        }

        public JsonResult GetCountryCode(string Countryname)
        {
            var content = (from p in context.Countries
                           where p.CountryName.ToLower() == Countryname.ToLower()
                           select new { p.Code }).FirstOrDefault();

            string CountryCode = string.Empty;

            if (content != null)
            {
                CountryCode = content.Code;
            }

            return Json(CountryCode, JsonRequestBehavior.AllowGet);
        }


        #region code for check username availability on recruiter sign up  added by rahul shukla dated:05/10/2015
        public JsonResult CheckUsername(string userName)
        {
            string IsAvailable;
            var getData = context.RegisterUsers.FirstOrDefault(m => m.UserFirstName == userName.Trim());
            if (getData == null)
            {
                IsAvailable = "Available";
            }
            else
            {
                IsAvailable = "Not Available";
            }
            return Json(IsAvailable, JsonRequestBehavior.AllowGet);
            // return IsAvailable;
        }
        #endregion

        #region code for save recruiter details in database added by rahul shukla modified date 05/10/2015
        [HttpPost]
        public ActionResult SaveRecruiters(FormCollection fc)
        {
            string emailId = fc["txtEmailAdd"];
            string Uname = fc["txtRecName"];
            SignUpWorldRefModel signModel = new SignUpWorldRefModel();
            RegisterUser register = new RegisterUser()
            {
                UserFirstName = fc["txtRecName"],
                Email = fc["txtEmailAdd"],
                phone = fc["txtConNum"],
                OrgName = fc["txtOrgName"],
                Industries = fc["IndustriesID"],
                RecruitmentType = fc["RecruitmentType"],
                RecruiterFlag = false,
                UserNo = getUserNo(),
                Password = GeneratePassword(),
                UserRole = "P",// user role for recruiters.
                Date = DateTime.Now
            };
            string OrgnisationName = fc["txtOrgName"];
            var Emailid = (from m in context.RegisterUsers where m.Company == OrgnisationName select new { m.Email }).FirstOrDefault();

            context.RegisterUsers.Add(register);
            context.SaveChanges();
            Email email = new Email();
            string Subject = "Welcome to WorldRef";
            string Body = "<div style='font-size:15px; font-family:Calibri Light;'>Thank you for Registering with World Ref.<br/> <br/> Your username is :" + signModel.UserNo + " <br/> Your password is :" + signModel.Password + " ";

            Body = Body +
                   " WorldRef gives you maximum exposure to utilize your experiences and achievements in the engineering industry.<br/><br/></div>";// Promotional Library
            email.SendMail(Uname, emailId, Subject, Body);

            return RedirectToAction("WorldrefIndex");
        }
        #endregion


        #region code Common User Registration on worldref added by rahul shukla dated :05/10/2015
        [HttpPost]
        public ActionResult SignUpUser(FormCollection fc, HttpPostedFileBase[] files)
        {
            SignUpWorldRef world = new SignUpWorldRef();
            string path = string.Empty;
            string filename = string.Empty;
            string SavePath = string.Empty;
            string Extension = string.Empty;
            try
            {
                for (int i = 0; i < Request.Files.Count; i++)
                {
                    HttpPostedFileBase postedFiles = Request.Files[i];

                    if (postedFiles != null)
                    {
                        SavePath = Guid.NewGuid().ToString();
                        Extension = Path.GetExtension(postedFiles.FileName);

                        filename = System.IO.Path.GetFileName(postedFiles.FileName);

                        postedFiles.SaveAs(Server.MapPath("~/uploads/" + SavePath + Extension));

                    }
                }

            }
            catch
            {


            }
            //UserNo = getUserNo(),
            string UserName = getUserNo();
            string CPerson = fc["txtName"];
            string CompanyName = fc["txtOrganization"];
            string ContactNumber = fc["txtContactno"];
            string emailId = fc["txtGemail"];
            string password = fc["txtGPassword"];
            string msg = world.SignUpLikeUser(CPerson, CompanyName, ContactNumber, emailId, password, UserName, filename);

            TempData.Clear();
            TempData.Add("ErrorMessage", msg);
            return RedirectToAction("WorldrefIndex");
            //return View(world.SignUpLikeUser( CPerson,CompanyName,ContactNumber,emailId,password,UserName,filename));
        }
        #endregion

        #region code for Search Image on worldref Added by rahul shukla dated:05/10/2015

        [HttpPost]
        public ActionResult WorldrefIndexImageSearch(FormCollection frm)
        {
            return RedirectToAction("SearchImages");
        }
        public ActionResult WorldrefIndexImageSearch()//Action methode for searchimages on index page
        {
            SignUpWorldRefModel signUpModel = new SignUpWorldRefModel();
            List<SelectListItem> selectListCountry = new List<SelectListItem>();
            List<SelectListItem> selectList = new List<SelectListItem>();//Developer, Investor, Fabricator, Procurement Staff, Others
            selectList.Add(new SelectListItem() { Text = "I am", Value = "0" });
            selectList.Add(new SelectListItem() { Text = "Manufacturer", Value = "Manufacturer" });
            selectList.Add(new SelectListItem() { Text = "Contractor", Value = "Contractor" });
            selectList.Add(new SelectListItem() { Text = "Consultant", Value = "Consultant" });
            selectList.Add(new SelectListItem() { Text = "Trading Company", Value = "Trading Company" });
            selectList.Add(new SelectListItem() { Text = "Project Owner’s/Procurement Staff", Value = "Project Owner’s/Procurement Staff" });
            selectList.Add(new SelectListItem() { Text = "Developer", Value = "Developer" });
            selectList.Add(new SelectListItem() { Text = "Investor", Value = "Investor" });
            selectList.Add(new SelectListItem() { Text = "Fabricator", Value = "Fabricator" });
            selectList.Add(new SelectListItem() { Text = "Raw Material Supplier", Value = "Raw Material Supplier" });
            selectList.Add(new SelectListItem() { Text = "Others", Value = "Others" });
            signUpModel.TypeList = selectList;

            var content = (from p in context.Countries
                           select new { p.CountryID, p.CountryName }).AsEnumerable();

            selectListCountry.Add(new SelectListItem() { Text = "Select Country", Value = "0" });

            foreach (var item in content)
            {
                selectListCountry.Add(new SelectListItem() { Text = item.CountryName, Value = item.CountryName });

            }
            signUpModel.CountryList = selectListCountry;
            KnowledgeLogic knowIndustry = new KnowledgeLogic();
            signUpModel.IndustryList = knowIndustry.GetIndustry();
            List<SelectListItem> selectList1 = new List<SelectListItem>();
            selectList1.Add(new SelectListItem() { Text = "Type of Recruitment", Value = "0" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for my Organisation only", Value = "I recruit for my Organisation only" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for Other Organisations only", Value = "I recruit for Other Organisations only" });
            selectList1.Add(new SelectListItem() { Text = "Both: I recruit for my and other organisations", Value = "Both: I recruit for my and other organisations" });
            signUpModel.RecruitersTypeList = selectList1;

            return View(signUpModel);
        }
        #endregion


        #region code for Search Videos On worldref Added by rahul shukla Dated : 05/10/2015
        [HttpPost]
        public ActionResult WorldrefIndexVideosSearch(FormCollection frm)
        {
            return RedirectToAction("SearchVideos");
        }
        public ActionResult WorldrefIndexVideosSearch()//Action methode for searchimages on index page
        {
            SignUpWorldRefModel signUpModel = new SignUpWorldRefModel();
            List<SelectListItem> selectListCountry = new List<SelectListItem>();
            List<SelectListItem> selectList = new List<SelectListItem>();//Developer, Investor, Fabricator, Procurement Staff, Others
            selectList.Add(new SelectListItem() { Text = "I am", Value = "0" });
            selectList.Add(new SelectListItem() { Text = "Manufacturer", Value = "Manufacturer" });
            selectList.Add(new SelectListItem() { Text = "Contractor", Value = "Contractor" });
            selectList.Add(new SelectListItem() { Text = "Consultant", Value = "Consultant" });
            selectList.Add(new SelectListItem() { Text = "Trading Company", Value = "Trading Company" });
            selectList.Add(new SelectListItem() { Text = "Project Owner’s/Procurement Staff", Value = "Project Owner’s/Procurement Staff" });
            selectList.Add(new SelectListItem() { Text = "Developer", Value = "Developer" });
            selectList.Add(new SelectListItem() { Text = "Investor", Value = "Investor" });
            selectList.Add(new SelectListItem() { Text = "Fabricator", Value = "Fabricator" });
            selectList.Add(new SelectListItem() { Text = "Raw Material Supplier", Value = "Raw Material Supplier" });
            selectList.Add(new SelectListItem() { Text = "Others", Value = "Others" });
            signUpModel.TypeList = selectList;

            var content = (from p in context.Countries
                           select new { p.CountryID, p.CountryName }).AsEnumerable();

            selectListCountry.Add(new SelectListItem() { Text = "Select Country", Value = "0" });

            foreach (var item in content)
            {
                selectListCountry.Add(new SelectListItem() { Text = item.CountryName, Value = item.CountryName });

            }
            signUpModel.CountryList = selectListCountry;
            KnowledgeLogic knowIndustry = new KnowledgeLogic();
            signUpModel.IndustryList = knowIndustry.GetIndustry();
            List<SelectListItem> selectList1 = new List<SelectListItem>();
            selectList1.Add(new SelectListItem() { Text = "Type of Recruitment", Value = "0" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for my Organisation only", Value = "I recruit for my Organisation only" });
            selectList1.Add(new SelectListItem() { Text = "I recruit for Other Organisations only", Value = "I recruit for Other Organisations only" });
            selectList1.Add(new SelectListItem() { Text = "Both: I recruit for my and other organisations", Value = "Both: I recruit for my and other organisations" });
            signUpModel.RecruitersTypeList = selectList1;

            return View(signUpModel);
        }
        #endregion
    }
}