//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WorldRef
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class I4IDBEntities : DbContext
    {
        public I4IDBEntities()
            : base("name=I4IDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AppointmentDiary> AppointmentDiaries { get; set; }
        public virtual DbSet<AssociateProjectIndustry> AssociateProjectIndustries { get; set; }
        public virtual DbSet<AssociateProject> AssociateProjects { get; set; }
        public virtual DbSet<AssociateRefferal> AssociateRefferals { get; set; }
        public virtual DbSet<Board_Management> Board_Management { get; set; }
        public virtual DbSet<Certificate> Certificates { get; set; }
        public virtual DbSet<Comp_profile_MultiLang> Comp_profile_MultiLang { get; set; }
        public virtual DbSet<CompanyInfo> CompanyInfoes { get; set; }
        public virtual DbSet<CompHistory> CompHistories { get; set; }
        public virtual DbSet<CompProfile> CompProfiles { get; set; }
        public virtual DbSet<ContactBook> ContactBooks { get; set; }
        public virtual DbSet<Conversation> Conversations { get; set; }
        public virtual DbSet<Country> Countries { get; set; }
        public virtual DbSet<CountryOld> CountryOlds { get; set; }
        public virtual DbSet<CurrentYear> CurrentYears { get; set; }
        public virtual DbSet<Customer_Details> Customer_Details { get; set; }
        public virtual DbSet<FactoryOffice> FactoryOffices { get; set; }
        public virtual DbSet<FollowUp> FollowUps { get; set; }
        public virtual DbSet<ForwardQuery> ForwardQueries { get; set; }
        public virtual DbSet<I4IForwardQuery> I4IForwardQuery { get; set; }
        public virtual DbSet<ImageLikeAndComment> ImageLikeAndComments { get; set; }
        public virtual DbSet<Industry> Industries { get; set; }
        public virtual DbSet<IndustryCategory> IndustryCategories { get; set; }
        public virtual DbSet<IndustrySubCategory> IndustrySubCategories { get; set; }
        public virtual DbSet<InputQueryData> InputQueryDatas { get; set; }
        public virtual DbSet<ISO> ISOes { get; set; }
        public virtual DbSet<KnowledgeQuery> KnowledgeQueries { get; set; }
        public virtual DbSet<KnowledgeQueryAnswer> KnowledgeQueryAnswers { get; set; }
        public virtual DbSet<Language> Languages { get; set; }
        public virtual DbSet<LinkedInUser> LinkedInUsers { get; set; }
        public virtual DbSet<LoginDetailWorldRef> LoginDetailWorldRefs { get; set; }
        public virtual DbSet<ManageDocument> ManageDocuments { get; set; }
        public virtual DbSet<OfficeDetails_RegCorpHead> OfficeDetails_RegCorpHead { get; set; }
        public virtual DbSet<OHSA> OHSAS { get; set; }
        public virtual DbSet<partners_Associates> partners_Associates { get; set; }
        public virtual DbSet<Preferred_Country> Preferred_Country { get; set; }
        public virtual DbSet<PriceCurrency> PriceCurrencies { get; set; }
        public virtual DbSet<ProductDetail> ProductDetails { get; set; }
        public virtual DbSet<ProductImagesVideo> ProductImagesVideos { get; set; }
        public virtual DbSet<Product> Products { get; set; }
        public virtual DbSet<ProjectContactDetail> ProjectContactDetails { get; set; }
        public virtual DbSet<ProjectImageLikeHistory> ProjectImageLikeHistories { get; set; }
        public virtual DbSet<ProjectImage> ProjectImages { get; set; }
        public virtual DbSet<ProjectImagesVideosLike> ProjectImagesVideosLikes { get; set; }
        public virtual DbSet<ProjectImageVideoComment> ProjectImageVideoComments { get; set; }
        public virtual DbSet<ProjectLikeComment> ProjectLikeComments { get; set; }
        public virtual DbSet<ProjectLikedIP> ProjectLikedIPs { get; set; }
        public virtual DbSet<ProjectLikeDisLike> ProjectLikeDisLikes { get; set; }
        public virtual DbSet<ProjectLikeHistory> ProjectLikeHistories { get; set; }
        public virtual DbSet<ProjectLinkedInMember> ProjectLinkedInMembers { get; set; }
        public virtual DbSet<ProjectRating> ProjectRatings { get; set; }
        public virtual DbSet<ProjectRatingHistory> ProjectRatingHistories { get; set; }
        public virtual DbSet<ProjectReview> ProjectReviews { get; set; }
        public virtual DbSet<ProjectSearchKeyword> ProjectSearchKeywords { get; set; }
        public virtual DbSet<Promote_Associate> Promote_Associate { get; set; }
        public virtual DbSet<PromotionCertificate> PromotionCertificates { get; set; }
        public virtual DbSet<PromotionIndustry> PromotionIndustries { get; set; }
        public virtual DbSet<PromotionLibrary> PromotionLibraries { get; set; }
        public virtual DbSet<PromotionOtherDocument> PromotionOtherDocuments { get; set; }
        public virtual DbSet<PromotionProductList> PromotionProductLists { get; set; }
        public virtual DbSet<RegionalOffice> RegionalOffices { get; set; }
        public virtual DbSet<RegisterUser> RegisterUsers { get; set; }
        public virtual DbSet<RepresentationRefferal> RepresentationRefferals { get; set; }
        public virtual DbSet<RepresentativeDocument> RepresentativeDocuments { get; set; }
        public virtual DbSet<RepresentativeOffice> RepresentativeOffices { get; set; }
        public virtual DbSet<Service> Services { get; set; }
        public virtual DbSet<Story> Stories { get; set; }
        public virtual DbSet<Supplier> Suppliers { get; set; }
        public virtual DbSet<SupplierProposal> SupplierProposals { get; set; }
        public virtual DbSet<SuppMailDetail> SuppMailDetails { get; set; }
        public virtual DbSet<TopicIndustry> TopicIndustries { get; set; }
        public virtual DbSet<TopicTimeDuration> TopicTimeDurations { get; set; }
        public virtual DbSet<Trainer_Profile> Trainer_Profile { get; set; }
        public virtual DbSet<TrainerBook> TrainerBooks { get; set; }
        public virtual DbSet<TrainerSample> TrainerSamples { get; set; }
        public virtual DbSet<TrainingSampleOrder> TrainingSampleOrders { get; set; }
        public virtual DbSet<User_Certificates> User_Certificates { get; set; }
        public virtual DbSet<User_Details> User_Details { get; set; }
        public virtual DbSet<User_ProductCertificates> User_ProductCertificates { get; set; }
        public virtual DbSet<User_Rewards> User_Rewards { get; set; }
        public virtual DbSet<UserIndustry> UserIndustries { get; set; }
        public virtual DbSet<UserProfile_Edit> UserProfile_Edit { get; set; }
        public virtual DbSet<VideosLikeAndComment> VideosLikeAndComments { get; set; }
        public virtual DbSet<WorldRefExcelDataProject> WorldRefExcelDataProjects { get; set; }
        public virtual DbSet<User_Certificate_DrpValue> User_Certificate_DrpValue { get; set; }
        public virtual DbSet<User_Certificate_DrpValue_Common> User_Certificate_DrpValue_Common { get; set; }
        public virtual DbSet<VisitUserProfile> VisitUserProfiles { get; set; }
        public virtual DbSet<SearchImageView> SearchImageViews { get; set; }
        public virtual DbSet<SearchImageView2> SearchImageView2 { get; set; }
        public virtual DbSet<SearchViewNew> SearchViewNews { get; set; }
        public virtual DbSet<SearchViewVideo> SearchViewVideos { get; set; }
        public virtual DbSet<SearchViewVideo2> SearchViewVideo2 { get; set; }
    
        public virtual ObjectResult<GetTrainerName_Result> GetTrainerName(Nullable<int> industriesID)
        {
            var industriesIDParameter = industriesID.HasValue ?
                new ObjectParameter("IndustriesID", industriesID) :
                new ObjectParameter("IndustriesID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTrainerName_Result>("GetTrainerName", industriesIDParameter);
        }
    
        public virtual int sp_CheckVisitUserLog(Nullable<int> registerid, string profilename, string ipaddress, ObjectParameter totalVisit)
        {
            var registeridParameter = registerid.HasValue ?
                new ObjectParameter("registerid", registerid) :
                new ObjectParameter("registerid", typeof(int));
    
            var profilenameParameter = profilename != null ?
                new ObjectParameter("profilename", profilename) :
                new ObjectParameter("profilename", typeof(string));
    
            var ipaddressParameter = ipaddress != null ?
                new ObjectParameter("ipaddress", ipaddress) :
                new ObjectParameter("ipaddress", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_CheckVisitUserLog", registeridParameter, profilenameParameter, ipaddressParameter, totalVisit);
        }
    
        public virtual ObjectResult<sp_GetAssociateIndustryProducts_Result> sp_GetAssociateIndustryProducts()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAssociateIndustryProducts_Result>("sp_GetAssociateIndustryProducts");
        }
    
        public virtual ObjectResult<sp_GetAssociateReferrals_Result> sp_GetAssociateReferrals(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetAssociateReferrals_Result>("sp_GetAssociateReferrals", idParameter);
        }
    
        public virtual ObjectResult<sp_GetData_Result> sp_GetData(string profilename)
        {
            var profilenameParameter = profilename != null ?
                new ObjectParameter("profilename", profilename) :
                new ObjectParameter("profilename", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetData_Result>("sp_GetData", profilenameParameter);
        }
    
        public virtual ObjectResult<sp_GetTrainerDetails_Result> sp_GetTrainerDetails(Nullable<int> id)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_GetTrainerDetails_Result>("sp_GetTrainerDetails", idParameter);
        }
    
        public virtual int sp_insert_update_Iso(string userid, string filename, Nullable<System.DateTime> expirydate)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var expirydateParameter = expirydate.HasValue ?
                new ObjectParameter("expirydate", expirydate) :
                new ObjectParameter("expirydate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_update_Iso", useridParameter, filenameParameter, expirydateParameter);
        }
    
        public virtual int sp_insert_update_OHSAS(string userid, string filename, Nullable<System.DateTime> expirydate)
        {
            var useridParameter = userid != null ?
                new ObjectParameter("userid", userid) :
                new ObjectParameter("userid", typeof(string));
    
            var filenameParameter = filename != null ?
                new ObjectParameter("filename", filename) :
                new ObjectParameter("filename", typeof(string));
    
            var expirydateParameter = expirydate.HasValue ?
                new ObjectParameter("expirydate", expirydate) :
                new ObjectParameter("expirydate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_update_OHSAS", useridParameter, filenameParameter, expirydateParameter);
        }
    
        public virtual int sp_insert_update_UserProfile_Edit(string financialrating, string iso, string ohsos, string employeeno, string revenue, string id, string isofilename, string isoexpirydate, string ohsosfilename, string ohsosexpirydate, string addres, Nullable<int> financialissuedby)
        {
            var financialratingParameter = financialrating != null ?
                new ObjectParameter("financialrating", financialrating) :
                new ObjectParameter("financialrating", typeof(string));
    
            var isoParameter = iso != null ?
                new ObjectParameter("iso", iso) :
                new ObjectParameter("iso", typeof(string));
    
            var ohsosParameter = ohsos != null ?
                new ObjectParameter("ohsos", ohsos) :
                new ObjectParameter("ohsos", typeof(string));
    
            var employeenoParameter = employeeno != null ?
                new ObjectParameter("employeeno", employeeno) :
                new ObjectParameter("employeeno", typeof(string));
    
            var revenueParameter = revenue != null ?
                new ObjectParameter("revenue", revenue) :
                new ObjectParameter("revenue", typeof(string));
    
            var idParameter = id != null ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(string));
    
            var isofilenameParameter = isofilename != null ?
                new ObjectParameter("isofilename", isofilename) :
                new ObjectParameter("isofilename", typeof(string));
    
            var isoexpirydateParameter = isoexpirydate != null ?
                new ObjectParameter("isoexpirydate", isoexpirydate) :
                new ObjectParameter("isoexpirydate", typeof(string));
    
            var ohsosfilenameParameter = ohsosfilename != null ?
                new ObjectParameter("ohsosfilename", ohsosfilename) :
                new ObjectParameter("ohsosfilename", typeof(string));
    
            var ohsosexpirydateParameter = ohsosexpirydate != null ?
                new ObjectParameter("ohsosexpirydate", ohsosexpirydate) :
                new ObjectParameter("ohsosexpirydate", typeof(string));
    
            var addresParameter = addres != null ?
                new ObjectParameter("addres", addres) :
                new ObjectParameter("addres", typeof(string));
    
            var financialissuedbyParameter = financialissuedby.HasValue ?
                new ObjectParameter("financialissuedby", financialissuedby) :
                new ObjectParameter("financialissuedby", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_insert_update_UserProfile_Edit", financialratingParameter, isoParameter, ohsosParameter, employeenoParameter, revenueParameter, idParameter, isofilenameParameter, isoexpirydateParameter, ohsosfilenameParameter, ohsosexpirydateParameter, addresParameter, financialissuedbyParameter);
        }
    
        public virtual int sp_search_Image(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_search_Image", typeParameter);
        }
    
        public virtual ObjectResult<sp_search_Project_Result> sp_search_Project(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_search_Project_Result>("sp_search_Project", typeParameter);
        }
    
        public virtual int sp_search_ProjectDat()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_search_ProjectDat");
        }
    
        public virtual int sp_search_Videos(string type)
        {
            var typeParameter = type != null ?
                new ObjectParameter("Type", type) :
                new ObjectParameter("Type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_search_Videos", typeParameter);
        }
    
        public virtual ObjectResult<SP_SendI4IMail_Result> SP_SendI4IMail()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SendI4IMail_Result>("SP_SendI4IMail");
        }
    
        public virtual ObjectResult<sp_topicDetails_Result> sp_topicDetails(string country, string industriesName, string topic)
        {
            var countryParameter = country != null ?
                new ObjectParameter("country", country) :
                new ObjectParameter("country", typeof(string));
    
            var industriesNameParameter = industriesName != null ?
                new ObjectParameter("IndustriesName", industriesName) :
                new ObjectParameter("IndustriesName", typeof(string));
    
            var topicParameter = topic != null ?
                new ObjectParameter("Topic", topic) :
                new ObjectParameter("Topic", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_topicDetails_Result>("sp_topicDetails", countryParameter, industriesNameParameter, topicParameter);
        }
    
        [DbFunction("I4IDBEntities", "SplitStringI4I")]
        public virtual IQueryable<string> SplitStringI4I(string input, string character)
        {
            var inputParameter = input != null ?
                new ObjectParameter("Input", input) :
                new ObjectParameter("Input", typeof(string));
    
            var characterParameter = character != null ?
                new ObjectParameter("Character", character) :
                new ObjectParameter("Character", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.CreateQuery<string>("[I4IDBEntities].[SplitStringI4I](@Input, @Character)", inputParameter, characterParameter);
        }
    }
}
